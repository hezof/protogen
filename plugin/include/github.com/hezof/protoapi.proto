syntax = "proto3";

package protoapi;
option go_package = "github.com/hezof/protoapi";

import "google/protobuf/descriptor.proto";

message Error {
  uint32 status = 1;               // 错误状态
  uint32 code = 2;                 // 错误代码
  string name = 3;                 // 错误名称
  string message = 4;              // 错误描述
  Docs docs = 5;                   // 外部文档
}

message Docs {
  string url = 1;                   // 外部文档链接
  string desc = 2;                  // 外部文档描述
}

message Tag {
  string name = 1;                  // The name of the tag
  string desc = 2;                  // A short description for the tag
  Docs docs = 4;                    // Additional external documentation for this tag.
}

message Http {

  enum Body {
    json = 0;                       // 解析body使用application/json
    form = 1;                       // 解析body使用multipart/form-data或application/x-www-form-urlencoded
    omit = 2;                       // 忽略解析body
  }

  enum Result {
    simple = 0;                    // 结果使用Result包裹
    unwrap = 1;                    // 结果不用Result包裹
    events = 2;                    // 结果使用Server-Send-Events包裹
  }

  string name = 1;                  // 概要信息
  string desc = 2;                  // 描述信息
  Docs docs = 3;                    // 外部文档
  string get = 4;                   // GET请求
  string put = 5;                   // PUT请求
  string post = 6;                  // POST请求
  string delete = 7;                // DELETE请求
  string options = 8;               // OPTIONS请求
  string head = 9;                  // HEAD请求
  string patch = 10;                // PATCH请求
  string trace = 11;                // TRACE请求
  string connect = 12;              // CONNECT请求
  string websocket = 13;            // WS请求(可能与GET冲突)
  Body body = 14;                   // body解析方式. 默认json!
  uint32 status = 15;               // 成功响应状态码
  Result result = 16;               // 结果处理方式.
  repeated Error errors = 17;       // 错误列表
  repeated string tags = 18;        // 标签列表
}

message Role {
  uint64 code = 1;                  // 角色标识
  string name = 2;                  // 角色名称
  string desc = 3;                  // 角色描述
  Docs docs = 4;                    // 角色文档
}

message Schema {
  string name = 1;                 // schema名称
  string desc = 2;                 // schema描述
  Docs docs = 3;                   // schema文档
}

message Plugin {
  string ref = 1;                  // 插件引用
  Error err = 2;                   // 插件错误
  repeated string ext = 3;         // 插件扩展
}

message Range {
  int64 val = 1;                  // 字串值
  Error err = 2;                  // 错误定义
  bool exclusive = 3;             // 排除边界
}

message Enum {
  repeated string val = 1;        // 数组列表
  Error err = 2;                  // 错误定义
}

message Pattern {
  string val = 1;                 // 正则值
  Error err = 2;                  // 错误定义
}

message Prop {

  enum In {
    body = 0;                       // 位于body
    path = 1;                       // 位于path
    query = 2;                      // 位于query
    header = 3;                     // 位于header
    cookie = 4;                     // 位于cookie
  }

  enum Style {
    simple = 0;                     // ARRAY(blue,black,brown), OBJECT(R=100,G=200,B=150)
    form = 1;                       // ARRAY(color=blue&color=black&color=brown), OBJECT(R=100&G=200&B=150)
    json = 2;                       // json
  }

  enum Empty {
    omit_empty = 0;                 // 忽略空值, 即omitempty
    with_empty = 1;                 // 携带空值, 即忽略omitempty
    conv_empty = 2;                 // 转换空值: 对于slice/map,会将null转为[]或{}.
  }

  string name = 1;                  // 概要信息
  string desc = 2;                  // 描述信息
  Docs docs = 3;                    // 外部文档
  Empty empty = 4;                  // 值处理策略
  bool escape_html = 5;             // 是否转义html特殊字符.
  bool enum_as_int = 6;             // 是否使用枚举下标.
  In in = 7;                        // 数据位置. 同openapi的in.
  Style style = 8;                  // 数据样式. 同openapi的style. 用于非json array或object!
  bool explode = 9;                 // 数据暴露. 同openapi的explode. 用于非json array或object!
}

message Rule {
  Error required = 1;               // 是否必需. 必须声明optional!
  Range minimum = 2;                // 最小数值
  Range maximum = 3;                // 最大数值
  Range min_length = 4;             // 最小长度
  Range max_length = 5;             // 最大长度
  Range min_items = 6;              // 最小数量
  Range max_items = 7;              // 最大数量
  Enum enum = 8;                    // 枚举列表
  Pattern pattern = 9;              // 正则匹配
  Plugin plugin = 10;               // 插件校验
}

extend  google.protobuf.ServiceOptions {
  Tag tag = 20000;                 // 服务标签
  bool http_only = 20001;          // 仅仅http
}

extend google.protobuf.MethodOptions {
  Http http = 30000;              // http绑定
  Role role = 30001;              // 方法角色
}

extend google.protobuf.MessageOptions {
  Schema schema = 40000;          // 消息数据
  Plugin plugin = 40001;          // 消息插件
}

extend google.protobuf.FieldOptions {
  Prop prop = 50000;              // 字段属性
  Rule rule = 50001;              // 字段规则
}

